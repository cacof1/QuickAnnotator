//////////////////////////////////////////////////////////////////////////////////////////
// Color code here
const colorON = "#A9A9A9";
const colorOFF = "#A9A9A900";
const colorNOTAVAILABLE = "#FF0000";
const colorAVAILABLE = "#00FF00";
const colorRUNNING = "#FFFF00";


////////////////////////////////////////////////////////////////////////////////////////////////////
// The primary canvas layers which will be displayed

// Note: the getContext() method returns an object that provides methods and properties for drawing on the canvas.
let canvas_bg = document.getElementById("canvas_bg");
let ctx_bg = canvas_bg.getContext("2d");
let canvas_mask = document.getElementById("canvas_mask");
let ctx_mask = canvas_mask.getContext("2d");
let canvas_result = document.getElementById("canvas_result");
let ctx_result = canvas_result.getContext("2d");
let canvasWidth, canvasHeight; // <!-- canvas*_ori * zoom_factor
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
// Create new canvases, one for each layer of the annotator,
// where the *_ori ones are the original raw data, and the above
// ones are for the processed and/or scaled image data.
let canvas_bg_ori = document.createElement("canvas");
let ctx_bg_ori = canvas_bg_ori.getContext("2d");
let canvas_mask_ori = document.createElement("canvas");
let ctx_mask_ori = canvas_mask_ori.getContext("2d");
let canvas_result_ori = document.createElement("canvas");
let ctx_result_ori = canvas_result_ori.getContext("2d");
let canvas_superpixel_ori = document.createElement("canvas");
let ctx_superpixel_ori = canvas_superpixel_ori.getContext("2d");
let canvas_superpixel_boundary_ori = document.createElement("canvas");
let ctx_superpixel_boundary_ori = canvas_superpixel_boundary_ori.getContext("2d");
let superpixel_data, superpixel_boundary_data;
let canvasWidth_ori, canvasHeight_ori;
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
let img, mask, result, superpixel_mask, superpixel_boundary_mask;
let imgWidth, imgHeight;
let cropSize = 256;
let defaultCropSize = 256;
let actualCropSize;
let leftUpperPt_x, leftUpperPt_y;
let sourceX, sourceY;
let leftUpperx_ori, leftUppery_ori;
let cropped_center_x, cropped_center_y;
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
let prediction_loaded = false;
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
let scrollH = 0;
let scrollV = 0;
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
// Canvases for the annotator tool:
let canvas_cropped_bg = document.getElementById("canvas_cropped_bg");
let ctx_cropped_bg = canvas_cropped_bg.getContext("2d");
let canvas_cropped_mask = document.getElementById("canvas_cropped_mask");
let ctx_cropped_mask = canvas_cropped_mask.getContext("2d");
let canvas_cropped_result = document.getElementById("canvas_cropped_result");
let ctx_cropped_result = canvas_cropped_result.getContext("2d");
const annotatorSize = 448;
var added_window_mouse_listeners = false;
var outside_annotation_canvas = true;
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
ctx_mask.imageSmoothingEnabled = false;
ctx_cropped_mask.imageSmoothingEnabled = false;
ctx_bg_ori.imageSmoothingEnabled = false;
ctx_mask_ori.imageSmoothingEnabled = false;
ctx_result_ori.imageSmoothingEnabled = false;
ctx_superpixel_boundary_ori.imageSmoothingEnabled = false;
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
let cropped_canvas_left_offset;
let cropped_canvas_top_offset;
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
// Stroek color and painting color in the annotation tool
mask_color_positvie = "rgba(0, 255, 255, 0.5)";
mask_color_unknown = "rgba(0, 0, 255, 0.5)";
ctx_cropped_mask.strokeStyle = mask_color_positvie;
ctx_cropped_mask.fillStyle = mask_color_positvie;
ctx_cropped_mask.lineWidth = 1;
ctx_cropped_mask.lineJoin = "round";
let pre_freehand_data;
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
let alreadyMakingAnnotation = false;
// This is the previous 'mouseNotPressedOnImage' variable
let annotatorEnabled = true; //We want to disable the annotator when we are moving mouse on the background image
let bgImageEnabler = true; //We want to disable the background while the user is working on the annotator.
let mousePressed = false;
let lastX, lastY;
let curX, curY;
let annotateData = [];
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
let layer = "fuse"; // annotation, fuse, dl
let mode = "superpixel"; // freehand, superpixel, eraser, flood
let annotation_class = "positive"; // positive, negative, unknown
let positiveRGB = [0, 255, 255];
let negativeRGB = [255, 0, 255];
let unknownRGB = [0, 0, 255];
let show_superpixel_boundary = false;
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
let cropsize_slider = document.getElementById("cropsizeSlider");
let cropsize_value = document.getElementById("cropsizeValue");
let zoom_factor_slider = document.getElementById('zoomFactorSlider');
let zoom_factor_value = document.getElementById('zoomFactorValue')
let previous_zoom_factor = 1.0;
let zoom_factor;
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
let undo_list = [];
let redo_list = [];
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
let tolerance = 24;
let sobel_result;
let gradient_magnitude;
let zerocrossing;
let seg_points = [];
let contours = [];
let current_path = [];
let savedAnnotation;
let eraser_size = "small"
////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
let superpixels_loaded = false;
let superpixels_boundary_load = false;
////////////////////////////////////////////////////////////////////////////////////////////////////

//Initialize for the log window Message
////////////////////////////////////////////////////////////////////////////////////////////////////
let logWindowMessage = "<u>Log Window Message</u>:<br>"
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
// Frontend about showing/hiding annotation/prediction layer, which give user 4 view modes in total
let showAnnotationDot = true;
let showPredictionDot = false;
////////////////////////////////////////////////////////////////////////////////////////////////////